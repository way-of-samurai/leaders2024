version: "3"

x-service: &service
  restart: unless-stopped

services:
  frontend:
    <<: *service
    build: ./frontend
    environment:
      API_URL: http://backend:8081
      IMAGE_PROXY_HOST: imageproxy
      IMAGE_PROXY_PORT: 8080
    ports:
      - "3000:3000"

  backend:
    <<: *service
    build: ./backend
    container_name: backend
    environment:
      DB_URL: "postgresql+psycopg2://postgres:${POSTGRES_PASSWORD}@postgres:5432/leaders2024"
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      FSSPEC_S3_ENDPOINT_URL: http://minio:9000
      FSSPEC_S3_KEY: ${MINIO_ROOT_USER}
      FSSPEC_S3_SECRET: ${MINIO_ROOT_PASSWORD}
      SD_REFERENCES_PATH: "s3://leaders2024/ml/sd/references"
      DEFAULT_SD_WEIGHTS_PATH: "s3://leaders2024/ml/sd/weights/gpb-lora.safetensors"
      DEBUG: "False"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0', '1']
              capabilities: [ gpu ]
    volumes:
      - llama-volume:/code/api/ml/models
    ports:
      - "5000:5000"
    depends_on:
      - minio
      - postgres
#      - redis

  imageproxy:
    <<: *service
    image: darthsim/imgproxy:latest
    environment:
      IMGPROXY_USE_S3: "true"
      IMGPROXY_S3_ENDPOINT: "http://minio:9000"
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
    depends_on:
      - minio

  minio:
    <<: *service
    image: quay.io/minio/minio:RELEASE.2024-06-06T09-36-42Z-cpuv1
    command: server /data --address ":9000" --console-address ":9001"
    container_name: minio
    volumes:
      - minio:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - "9001:9001"
      - "9000:9000"

  postgres:
    <<: *service
    image: postgres:16.3-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: leaders2024
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"

#  redis:
#    <<: *service
#    image: redis:7.2-alpine
#    command: 'redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}'
#    container_name: redis
#    environment:
#      REDIS_PASSWORD: ${REDIS_PASSWORD}
#    volumes:
#      - redis:/data

volumes:
  minio:
  postgres:
  llama-volume:
#  redis:
